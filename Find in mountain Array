// leetcode link : https://leetcode.com/problems/find-in-mountain-array/description/

// Must do question very tricky


// JavaScript code : 



var findInMountainArray = function(target, mountainArr){
    
    let ans = -1;
    let peak = findPeak(mountainArr);

    if(mountainArr.get(peak) < target){ // if the top element of our array is smaller than the target then we don't need to make any unnecessary comparisons or calls
        return -1;
    }
    ans = binarySearch(0,peak,mountainArr,target,false); // taking a boolean to check if we are traversing in a ascending order array or a descending order array

    if(ans === -1){
        ans = binarySearch(peak+1, mountainArr.length()-1,mountainArr,target,true);
    }

    return ans;
}


function binarySearch(start,end,arr,target,isDsc){
    
    while(start <= end){
        let mid = Math.floor((start+end)/2);

        if(arr.get(mid) === target){
            return mid;
        }
        
        if(isDsc){
            if(arr.get(mid) < target){
                end = mid-1;
            }else{
            start = mid+1;
            }
        }else{
            if(arr.get(mid) < target){
            start = mid+1;
        }else{
            end = mid-1;
        }
        }
        
    }

    return -1;
}



function findPeak(nums){ // function to find the top element of the array
    

    // a array will only be a moutain array if it has three or more than three elements
    if(nums.length() == 1){
        return 0;
    }

    if(nums.length() == 2){
        if(nums.get(0) > nums.get(1)){
            return 0;
        }else{
            return 1;
        }
    }

    // these conditions are for checking if it is a mountain array or not
    let start = 0;
    let end = nums.length()-1;

    while(start < end){
        let mid = Math.floor((start+end)/2);

        if(nums.get(mid) < nums.get(mid+1)){
            start = mid+1;
        }else if(nums.get(mid) > nums.get(mid+1)){
            end = mid;
        }
    }

    return start;
}



// Java Code :


class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        
        int ans = -1;
        int peak = foundPeak(mountainArr);

        if(mountainArr.get(peak) < target){
            return -1;
        }
        ans = binarySearch(0,peak, mountainArr, target, false);

        if(ans == -1){
            ans = binarySearch(peak+1, mountainArr.length()-1, mountainArr, target, true);
        }

        return ans;
    }


    int foundPeak( MountainArray mountainArr){

        int start = 0;
        int end = mountainArr.length()-1;

        while(start < end){
            int mid = start + (end-start)/2;

            if(mountainArr.get(mid) < mountainArr.get(mid+1)){
                start = mid+1;
            }else{
                end = mid;
            }
        }

        return start;
    }


    int binarySearch(int start, int end,  MountainArray mountainArr, int target, boolean isDsc){

        while(start <= end){

            int mid = start+(end-start)/2;

            if(mountainArr.get(mid) == target){
                return mid;
            }

            if(isDsc){
                if(mountainArr.get(mid) < target){
                    end = mid-1;
                }else{
                    start = mid+1;
                }
            }else{
                if(mountainArr.get(mid) < target){
                    start = mid+1;
                }else{
                    end = mid-1;
                }
            }
        }

        return -1;
    }
}