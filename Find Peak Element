// leetcode link : https://leetcode.com/problems/find-peak-element/description/

// JavaScript Code :


// Brute force approach 

let arr = [1,2,3,4,5,6,5,4,2,1];

let res = bruteForceApproach(arr);

console.log(res)

function bruteForceApproach(arr){
    
    let ans = 0;
    
    for(let i = 1; i < arr.length; i++){
        if(arr[i] > arr[ans]){
            ans = i;
        }else{
            break;
        }
    }
    
    return ans;
}

// Optimal Approach
var findPeakElement = function(nums) {

    if(nums.length == 1){
        return 0;
    }

    if(nums.length == 2){
        if(nums[0] > nums[1]){
            return 0;
        }else{
            return 1;
        }
    }
    let start = 0;
    let end = nums.length-1;

    while(start < end){
        let mid = Math.floor((start+end)/2);

        if(nums[mid] < nums[mid+1]){
            start = mid+1;
        }else if(nums[mid] > nums[mid+1]){
            end = mid;
        }
    }

    return start;
};


// Java Code :

// brute force 

// while using brute force our TC will be O(N)

class HelloWorld {
    public static void main(String[] args) {
        
        int [] arr = {1,2,3,4,5,6,5,4,3,2,1};
        System.out.println(bruteForce(arr));
    }
    
    public static int bruteForce(int [] arr){
        
        int ans = 0;
        
        for(int i = 1; i < arr.length; i++){
            if(arr[i] > arr[ans]){
                ans = i;
            }else if(arr[i] < arr[ans]){
                break;
            }
        }
        
        return ans;
    }
}


// optimal approach

// while using binary search our TC will be O(lonN)
class HelloWorld {
    public static void main(String[] args) {
        
        int [] arr = {1,2,3,4,5,6,5,4,3,2,1};
        System.out.println(binarySearch(arr));
    }
    
    public static int binarySearch(int [] arr){
        
        int start = 0, end = arr.length-1;
        
        while(start < end){
            int mid = start + (end-start)/2;
            
            if(arr[mid] < arr[mid+1]){
                start = mid+1;
            }else if(arr[mid] > arr[mid+1]){
                end = mid;
            }
        }
        
        return start;
    }
}