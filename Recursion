// Recursion : Recursion is the process of repeating items in a self-similar way.

// Why Recursion : It helps us in solving crucial problems in an easy way.

// Example : Let us say you have to print numbers from one to n and you cannot use loops. 

// Now we have two ways to do that. First we can make n functions for that and each function will call the next function, that will lead us to a lot of memory wastage and after that we will get an error named stack overflow error.
// But we have another approach that includes recursion in it. In which there will be only one function that will call itself until it will reach the condition.


// Functional approach : 

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class HelloWorld {
    public static void main(String[] args) {
        print1(1);
    }
    
    static void print1(int n){
        System.out.println(n);
        print2(2);
    }
    static void print2(int n){
        System.out.println(n);
        print3(3);
    }
    static void print3(int n){
        System.out.println(n);
        print4(4);
    }
    static void print4(int n){
        System.out.println(n);
        print5(5);
    }
    static void print5(int n){
        System.out.println(n);
    }
}


// Recursive approach :

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class HelloWorld {
    public static void main(String[] args) {
        print(1);
    }
    
    static void print(int n){
        
        if(n == 5){  // base condition : The condition after that the function will end.
            System.out.println(5);
            return;
        }
        System.out.println(n);
        print(n+1); // function behaving recursively.
    }
}