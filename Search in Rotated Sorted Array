
// leetcode link : https://leetcode.com/problems/search-in-rotated-sorted-array/description/


// JavaScript Code :

var search = function(nums, target) {
    
    let pivot = findPivot(nums);

    if(pivot === -1){
        return binarySearch(0,nums.length-1,nums,target);
    }else{
        if(nums[0] <= target){
            return binarySearch(0,pivot,nums,target);
        }else{
             return binarySearch(pivot+1,nums.length-1,nums,target);
        }
    }

    
};

const findPivot = (nums) => {
    let start = 0;
    let end = nums.length-1;

    while(start <= end){
        let mid = Math.floor((start+end)/2);

        if(mid < end && nums[mid] > nums[mid+1]){
            return mid;
        }

        if(mid > start && nums[mid] < nums[mid-1]){
            return mid-1;
        }

        if(nums[mid] <= nums[start]){
            end = mid-1;
        }else{
            start = mid+1;
        }
    }
    return -1;
}

const binarySearch = (start, end, nums, target) => {
    while(start <= end){
        let mid = Math.floor((start+end)/2)

        if(nums[mid] === target){
            return mid;
        }

        if(nums[mid] < target){
            start = mid+1;
        }else{
            end = mid-1;
        }
    }

    return -1;
}

// Java Code :

class Solution {
    public int search(int[] nums, int target) {
        
        int pivot = findPeak(nums); // First of all we will find the pivot of the array

        if(pivot == -1){  // if we don't have a pivot than our array is not rotated then we will do simple binarySearch
           return binarySearch(nums, target, 0, nums.length-1);
        }else{
            if(nums[0] <= target){
               return binarySearch(nums, target, 0, pivot); // if we have a pivot then we will traverse from 0 to pivot to find the target if our target is greater than nums[0];
            }else{
               return binarySearch(nums, target, pivot+1, nums.length-1);
            }
        }
        // return -1;
    }

    
    public static int findPeak(int [] arr){
        
            int start = 0;
            int end = arr.length-1;
            
            while(start <= end){
                int mid = start + (end-start)/2;
                // case 1
                if(mid < end && arr[mid] > arr[mid+1]){
                    return mid;
                }
                // case 2
                if(mid > start && arr[mid] < arr[mid-1]){
                    return mid-1;
                }
                
                //case 3
                if(arr[mid] < arr[start]){
                    end = mid-1;
                }else{
                    start = mid+1;
                }
            }
        return -1;
    }


    int binarySearch(int [] arr, int target, int start, int end ){  // Simple binary Search
 
        while(start <= end){

            int mid = start+(end-start)/2;

            if(arr[mid] == target){
                return mid;
            }

            if(arr[mid] < target){
                start = mid+1;
            }else{
                end = mid-1;
            }
            
            
        }

        return -1;
    }
}